from typing import Dict, List
from dataclasses import dataclass
from openai import AsyncOpenAI
from config import DEESEEK_API_KEY1, ADMIN_GROUP_ID, owner_username
from aiogram import Bot
from models import UserData
from db_operations.extracting_style import get_conversation_messages
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from fastapi import Depends
from sqlalchemy.ext.asyncio import async_sessionmaker
from db_operations.db_operatins import get_sessionmaker

import json
import os

client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=DEESEEK_API_KEY1,
)

user_contexts: Dict[int, List[dict]] = {}

@dataclass
class ChatContext:
    messages: List[dict]
    max_length: int = 200


async def ai_generate(
    user_id: int,
    username: str,
    text: str,
    bot: Bot,
    user_data: UserData,
    promt_type: str,
    session_maker: async_sessionmaker[AsyncSession]  # –ë–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
) -> str:
    if user_id not in user_contexts:
        user_contexts[user_id] = ChatContext(messages=[])
    
    context = user_contexts[user_id]

    def load_prompt(promt_type: str) -> str:
        if os.path.exists("promts.json"):
            with open("promts.json", "r", encoding="utf-8") as file:
                prompts = json.load(file)
                return prompts.get(promt_type, "")
        return ""
    
    if len(context.messages) == 0:
        promt = load_prompt(promt_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
        conversation_history = ""
        try:
            async with session_maker() as session:
                conversation_history = await get_conversation_messages(
                    username_owner=owner_username,
                    username_guest=username,
                    session=session
                )
                print(conversation_history)
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫ –ø—Ä–æ–º—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                if conversation_history and not conversation_history.startswith(("–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω", "–ë–µ—Å–µ–¥—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")):
                    promt = promt.replace('{–ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –í–ª–∞–¥–∏–º–∏—Ä–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á–∞}', conversation_history)
                
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥: {e}")
            if ADMIN_GROUP_ID:
                try:
                    await bot.send_message(ADMIN_GROUP_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥: {e}")
                except Exception as send_error:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {send_error}")
        
        if promt_type == "The_main_promt":
            context.messages.append({"role": "system", "content": promt})

    context.messages.append({"role": "user", "content": text})

    if len(context.messages) > context.max_length * 2:
        context.messages = context.messages[-context.max_length * 2:]

    try:
        completion = await client.chat.completions.create(
            model="deepseek/deepseek-chat-v3-0324:free",
            messages=context.messages
        )

        assistant_response = completion.choices[0].message.content
        context.messages.append({"role": "assistant", "content": assistant_response})
        
        return assistant_response
        
    except Exception as e:
        error_msg = f"üö® Critical API Error: {str(e)}"
        print(error_msg)
        if ADMIN_GROUP_ID:
            try:
                await bot.send_message(ADMIN_GROUP_ID, error_msg)
            except Exception as send_error:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {send_error}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!"

def clear_context(user_id: int):
    user_contexts.pop(user_id, None)