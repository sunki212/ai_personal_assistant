import json
import re

from aiogram import Router, F, Bot, types, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Dict
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import ADMIN_GROUP_ID, owners, developers
from lists_of_users.create_JSON_lists import load_admitted, load_blacklist, load_applications
from models import UserData
from generate import ai_generate, clear_context
from keyboards import application_key, owners_keyboard, admitted_keyboard
from db_operations.db_operatins import get_sessionmaker, get_message_contexts
from db_operations.process_messages import embedding_single_message, process_single_message
from Database.db_create import find_similar_messages

applications: Dict[str, str] = load_applications()
blacklist: Dict[str, str] = load_blacklist()
admitted: Dict[str, str] = load_admitted()

handlers_router = Router()
  
class Form_with_AI(StatesGroup):
    default_communication = State()
    
class Form_application(StatesGroup):
    fio = State()
    tg_username = State()
    
class DeveloperStates(StatesGroup):
    waiting_for_new_prompt = State()

@handlers_router.message(F.chat.id == ADMIN_GROUP_ID, F.text)
async def handle_admin_group_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã.
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: __%–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–º—Ç–∞%__\n—Ç–µ–∫—Å—Ç
    """
    text = message.text  # —Ç–µ–∫—Å—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–±–ª–æ–Ω–∞ "__%–Ω–∞–∑–≤–∞–Ω–∏–µ%__\n—Ç–µ–∫—Å—Ç"
    pattern = re.compile(r'^__%(.+?)%__\r?\n(.+)', re.DOTALL)
    match = pattern.match(text)

    if not match:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: __%–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–º—Ç–∞%__\\n—Ç–µ–∫—Å—Ç",
            quote=True
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –∏ —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    prompt_name = match.group(1).strip()
    prompt_text = match.group(2).strip()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º—Ç—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞ (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å)
    try:
        with open("prompts.json", "r", encoding="utf-8") as file:
            prompts = json.load(file)
    except FileNotFoundError:
        prompts = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    prompts[prompt_name] = prompt_text

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON-—Ñ–∞–π–ª
    with open("prompts.json", "w", encoding="utf-8") as file:
        json.dump(prompts, file, ensure_ascii=False, indent=4)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
    await message.reply(f"–ü—Ä–æ–º—Ç \"{prompt_name}\" —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", quote=True)

    

@handlers_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    username = message.from_user.username
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
    list_of_users = load_admitted()
    if message.from_user.id in owners:
        await message.answer(
            "–í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup=owners_keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        )
        return
    
    if f"@{username}" in admitted or len(list_of_users) is None:
        await message.answer(
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –í–æ–ª–æ–¥–µ–π! ‚ú®\n\n"
            "ü§ñ –ë–æ—Ç –í–æ–ª–æ–¥—è ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π:\n"
            "üîπ –û—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Å–∞–º–∏–º –í–ª–∞–¥–∏–º–∏—Ä–æ–º –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "üîπ –ü–æ–¥–¥–µ—Ä–∂–∏—Ç –±–µ—Å–µ–¥—É —Ç–∞–∫, –±—É–¥—Ç–æ –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å –ª–∏—á–Ω–æ —Å –í–ª–∞–¥–∏–º–∏—Ä–æ–º –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á–µ–º.\n\n"
            "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ ‚Äî –∏ –Ω–∞—á–Ω—ë–º! üöÄ\n\n"
            "**P.S. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –¥–∞–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –æ–Ω —Å–∞–º –≤–∞–º –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –Ω–∞—à –º–∞–ª–µ–Ω—å–∫–∏–π —Å–µ–∫—Ä–µ—Ç!** üòâ",
            reply_markup=admitted_keyboard)
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",
            reply_markup=application_key
        )
    

@handlers_router.message(Command("replace_prom"))
async def replace_prompt_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–º–µ–Ω—ã –ø—Ä–æ–º—Ç–∞"""
    if message.from_user.id not in developers:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç
        with open('promts.json', 'r', encoding='utf-8') as f:
            prompts = json.load(f)
        current_prompt = prompts.get('The_main_promt', '–ü—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ç–º–µ–Ω–æ–π
        cancel_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_prompt_update")]
            ]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º—Ç–æ–º
        sent_msg = await message.answer(
            f"–î–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º—Ç:\n\n{current_prompt}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞...",
            reply_markup=cancel_kb
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(message_id=sent_msg.message_id)
        await state.set_state(DeveloperStates.waiting_for_new_prompt)
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@handlers_router.callback_query(F.data == "cancel_prompt_update")
async def cancel_prompt_update(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞"""
    data = await state.get_data()
    message_id = data.get('message_id')
    
    try:
        if message_id:
            await callback.bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=message_id
            )
    finally:
        await state.clear()
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@handlers_router.message(DeveloperStates.waiting_for_new_prompt)
async def process_new_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞"""
    try:
        data = await state.get_data()
        message_id = data.get('message_id')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open('promts.json', 'r+', encoding='utf-8') as f:
            prompts = json.load(f)
            prompts['The_main_promt'] = message.text
            f.seek(0)
            json.dump(prompts, f, ensure_ascii=False, indent=4)
            f.truncate()
        
        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_id:
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=message_id
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        
        await message.answer("‚úÖ –ü—Ä–æ–º—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@handlers_router.message(DeveloperStates.waiting_for_new_prompt)
async def process_new_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º—Ç –≤ —Ñ–∞–π–ª–µ
        with open('promts.json', 'r+', encoding='utf-8') as f:
            data = json.load(f)
            data['The_main_promt'] = message.text
            f.seek(0)
            json.dump(data, f, ensure_ascii=False, indent=4)
            f.truncate()
        
        await message.answer("‚úÖ –ü—Ä–æ–º—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
    finally:
        await state.clear()
        
    
# –î–∞–ª–µ–µ –∏–¥—ë—Ç –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
    
@handlers_router.message(Form_with_AI.default_communication)
async def process_default_communication(
    message: Message, 
    state: FSMContext, 
    bot: Bot,
    dispatcher: Dispatcher  # –î–æ–±–∞–≤–ª—è–µ–º Dispatcher –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    if message.text and message.text.lower() in ("!!!–≤—ã—Ö–æ–¥!!!", "/exit"):
        await state.clear()
        if message.from_user.username in load_admitted():
            await message.answer(
            "‚úÖ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            reply_markup=admitted_keyboard)
        elif message.from_user.id in owners:
            await message.answer(
            "‚úÖ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            reply_markup=owners_keyboard)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç UserData
    user_data = UserData(
        user_id=message.from_user.id,
        username=message.from_user.username,
        default_communication=data.get('default_communication', '')
    )
    
    # –ü–æ–ª—É—á–∞–µ–º sessionmaker –∏–∑ dispatcher
    session_maker = await get_sessionmaker(dispatcher)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
    response = await ai_generate(
        user_id=message.from_user.id,
        username=message.from_user.username,
        text=message.text,
        bot=bot,
        user_data=user_data,
        promt_type="The_main_promt",
        session_maker=session_maker
    )
    print(f"{message.text}\n\n {response}")
    if re.findall(r"\|.+\|", response):
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ session_maker
        async with session_maker() as session:
            embed_response = await embedding_single_message(await process_single_message(str(re.findall(r"(?<=\|).+(?=\|)",response)[0]).strip("|")))
            message_tuples = await find_similar_messages(
                session=session,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
                embedding=embed_response,
                threshold=0.1
            )
            context = await get_message_contexts(
                message_tuples=message_tuples,
                session=session  # –¢–æ–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            )
            print(f' –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ \n{message_tuples} \n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n  {context}')
            
        response = await ai_generate(
            user_id=message.from_user.id,
            username=message.from_user.username,
            text=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:–ù–∞–π–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{context}\n\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞, –æ—Ç–≤–µ—Ç—å —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏/–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –Ω–æ –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ –∫–∞–∫ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –±—ã –í–ª–∞–¥–∏–º–∏—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
            bot=bot,
            user_data=user_data,
            promt_type="The_main_promt",
            session_maker=session_maker
        )
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response)

    
@handlers_router.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext):
    clear_context(message.from_user.id)
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!")
    await state.set_state(Form_with_AI.default_communication)