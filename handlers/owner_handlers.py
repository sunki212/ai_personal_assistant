from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import owners
from lists_of_users.create_JSON_lists import load_applications, load_admitted, load_blacklist, save_admitted, save_applications, save_blacklist
from handlers.handlers import Form_with_AI
from keyboards import owners_keyboard, admitted_keyboard

owners_router = Router()


class OwnerStates(StatesGroup):
    VIEW_APPLICATIONS = State()
    VIEW_ADMITTED = State()
    VIEW_BLACKLIST = State()
    PROCESS_APPLICATION = State()
    PROCESS_PERMISSION = State()
    PROCESS_BLACKLIST = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@owners_router.message(lambda message: message.text == "üìã –ó–∞—è–≤–∫–∏")
async def handle_view_applications(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫'"""
    await view_applications(message, state)

@owners_router.message(lambda message: message.text == "‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ")
async def handle_view_admitted(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
    await view_admitted(message, state)

@owners_router.message(lambda message: message.text == "üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
async def handle_view_blacklist(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Å–º–æ—Ç—Ä —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞'"""
    await view_blacklist(message, state)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
async def view_applications(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø"""
    applications = load_applications()
    if not applications:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    buttons = [
        [InlineKeyboardButton(text=username, callback_data=f"app_{user_id}")]
        for user_id, username in applications.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏—à–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–µ:",
        reply_markup=keyboard
    )
    await state.set_state(OwnerStates.VIEW_APPLICATIONS)

async def view_admitted(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    admitted = load_admitted()
    if not admitted:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.")
        return
    
    buttons = [
        [InlineKeyboardButton(text=username, callback_data=f"perm_{user_id}")]
        for user_id, username in admitted.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏—à–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:",
        reply_markup=keyboard
    )
    await state.set_state(OwnerStates.VIEW_ADMITTED)

async def view_blacklist(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    blacklist = load_blacklist()
    if not blacklist:
        await message.answer("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    
    buttons = [
        [InlineKeyboardButton(text=username, callback_data=f"bl_{user_id}")]
        for user_id, username in blacklist.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏—à–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:",
        reply_markup=keyboard
    )
    await state.set_state(OwnerStates.VIEW_BLACKLIST)


async def is_owner(callback_or_message: types.Message | types.CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
    if isinstance(callback_or_message, types.CallbackQuery):
        user_id = callback_or_message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ callback
    else:
        user_id = callback_or_message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    print(f"Checking owner: {user_id} in {owners}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    return user_id in owners


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@owners_router.callback_query()
async def handle_inline_buttons(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–ª–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º {@username: "–§–∞–º–∏–ª–∏—è –ò.–û."}"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if not await is_owner(callback):
            await callback.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞", show_alert=True)
            return

        data = callback.data
        applications = load_applications()
        admitted = load_admitted()
        blacklist = load_blacklist()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ (VIEW_APPLICATIONS)
        if data.startswith("app_"):
            username = data[4:]  # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
            
            if username in applications:
                full_name = applications[username]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{username}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{username}")
                    ]
                ])
                
                await callback.message.edit_text(
                    f"–ó–∞—è–≤–∫–∞ –æ—Ç {full_name} ({username})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )
                await state.set_state(OwnerStates.PROCESS_APPLICATION)
            else:
                await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

        # –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (PROCESS_APPLICATION)
        elif data.startswith("approve_"):
            username = data[8:]
            
            if username in applications:
                full_name = applications[username]
                admitted[username] = full_name
                del applications[username]
                
                save_admitted(admitted)
                save_applications(applications)
                
                await callback.message.edit_text(
                    f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {full_name} ({username})"
                )
                
                # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await bot.send_message(
                        chat_id=username,
                        text=f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, {full_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                
            else:
                await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
            await state.clear()

        # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (PROCESS_APPLICATION)
        elif data.startswith("reject_"):
            username = data[7:]
            
            if username in applications:
                full_name = applications[username]
                del applications[username]
                save_applications(applications)
                
                await callback.message.edit_text(
                    f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {full_name} ({username})"
                )
            else:
                await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
            await state.clear()

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (VIEW_ADMITTED)
        elif data.startswith("perm_"):
            username = data[5:]
            
            if username in admitted:
                full_name = admitted[username]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"revoke_{username}"),
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel")
                    ]
                ])
                
                await callback.message.edit_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} ({username})\n\n–£–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø?",
                    reply_markup=keyboard
                )
                await state.set_state(OwnerStates.PROCESS_PERMISSION)
            else:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        # –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ (PROCESS_PERMISSION)
        elif data.startswith("revoke_"):
            username = data[7:]
            
            if username in admitted:
                full_name = admitted[username]
                blacklist[username] = full_name
                del admitted[username]
                
                save_admitted(admitted)
                save_blacklist(blacklist)
                
                await callback.message.edit_text(
                    f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {full_name} ({username})"
                )
            else:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            
            await state.clear()

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (VIEW_BLACKLIST)
        elif data.startswith("bl_"):
            username = data[3:]
            
            if username in blacklist:
                full_name = blacklist[username]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_{username}"),
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel")
                    ]
                ])
                
                await callback.message.edit_text(
                    f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {full_name} ({username})\n\n–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø?",
                    reply_markup=keyboard
                )
                await state.set_state(OwnerStates.PROCESS_BLACKLIST)
            else:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (PROCESS_BLACKLIST)
        elif data.startswith("unban_"):
            username = data[6:]
            
            if username in blacklist:
                full_name = blacklist[username]
                admitted[username] = full_name
                del blacklist[username]
                
                save_blacklist(blacklist)
                save_admitted(admitted)
                
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {full_name} ({username})"
                )
            else:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            
            await state.clear()

        # –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
        elif data == "cancel":
            await callback.message.delete()
            await state.clear()

        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        
@owners_router.message(F.text == "üí¨ –û–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º")
async def handle_chat_with_bot(message: types.Message, state: FSMContext):
    """
    –†–∞–±–æ—á–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º" –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if f'@{message.from_user.username}' not in load_admitted():
        print(load_admitted(), message.from_user.username)
        await message.answer(
            "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞",
            reply_markup=admitted_keyboard  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        return
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò
        await message.answer(
            "–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.\n\n"
            '–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ "!!!–≤—ã—Ö–æ–¥!!!" –∏–ª–∏ "/exit"',
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await state.set_state(Form_with_AI.default_communication)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@owners_router.message(Command("check_state"))
async def check_state(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    await message.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

async def handle_owner_commands(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Ö–æ–∑—è–∏–Ω–∞"""
    if not await is_owner(message):
        return
    
    
def register_owner_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ö–æ–∑—è–∏–Ω–∞"""
    dp.message.register(handle_owner_commands, lambda m: m.text in [
        "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", 
        "‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ", 
        "üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    ])
    dp.callback_query.register(handle_inline_buttons)