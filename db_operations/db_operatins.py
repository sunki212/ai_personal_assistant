import os
import re
import json
from datetime import time, date
from sqlalchemy import select, and_, update
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from sqlalchemy import func
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram import Router, types, F, Bot, Dispatcher

from fastapi import Depends
import sys
from pathlib import Path


# –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (Hakaton_2_sem)
project_root = Path(__file__).parent.parent  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –æ—Ç db_operations
sys.path.append(str(project_root))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –≤ sys.path
from Database.db_create import User, Conversation, Message
from Database.db_create import DB_HOST, DB_NAME, DB_PORT, DB_USER, DB_PASSWORD
from keyboards import get_cancel_keyboard
from db_operations.process_messages import process_single_message, embedding_single_message
from config import owners

async def get_sessionmaker(dispatcher: Dispatcher) -> async_sessionmaker[AsyncSession]:
    return dispatcher['async_session_maker']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = f"postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"


# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–æ–≤
JSON_FOLDER = "date_json"
os.makedirs(JSON_FOLDER, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UploadConversation(StatesGroup):
    date = State()
    time = State()
    json_file = State()
    
class UpdateUsernames(StatesGroup):
    waiting_for_username = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ username
    current_speaker = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
    
dboperations_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dboperations_router.callback_query(F.data == "cancel_upload")
async def cancel_upload(callback: types.CallbackQuery, state: FSMContext):
    print(f"[DEBUG] Cancel pressed by {callback.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        print(f"[DEBUG] Current state data: {data}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await callback.message.delete()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        if 'last_bot_message_id' in data:
            try:
                await callback.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=data['last_bot_message_id']
                )
            except Exception as e:
                print(f"[DEBUG] Error deleting bot message: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –µ–≥–æ ID)
        if 'last_message_id' in data:
            try:
                await callback.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=data['last_message_id']
                )
            except Exception as e:
                print(f"[DEBUG] Error deleting user message: {e}")
                
    except Exception as e:
        print(f"[DEBUG] Error in cancel handler: {e}")
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    await state.clear()
    
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –Ω–∞—á–∞–ª–µ)
@dboperations_router.message(F.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
async def start_upload(message: types.Message, state: FSMContext):
    if message.from_user.id not in owners:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD",
        reply_markup=get_cancel_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    await state.update_data(
        last_bot_message_id=msg.message_id,
        cancel_message_id=msg.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    )
    await state.set_state(UploadConversation.date)

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç —Ö–æ–∑—è–∏–Ω–∞ –î–∞—Ç—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
@dboperations_router.message(UploadConversation.date)
async def process_date(message: types.Message, state: FSMContext):
    if not re.match(r'^(19|20)\d\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$', message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-12-31)")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    try:
        data = await state.get_data()
        if 'last_bot_message_id' in data:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=data['last_bot_message_id']
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)",
        reply_markup=get_cancel_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.update_data(
        conversation_date=message.text,
        last_message_id=message.message_id,
        last_bot_message_id=msg.message_id,  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_message_id=msg.message_id     # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    )
    await state.set_state(UploadConversation.time)

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç —Ö–æ–∑—è–∏–Ω–∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
@dboperations_router.message(UploadConversation.time)
async def process_time(message: types.Message, state: FSMContext):
    if not re.match(r'^([01][0-9]|2[0-3]):([0-5][0-9])$', message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:15 –∏–ª–∏ 23:45)")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    try:
        data = await state.get_data()
        if 'last_bot_message_id' in data:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=data['last_bot_message_id']
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    msg = await message.answer(
        "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª JSON —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –í–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
        reply_markup=get_cancel_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.update_data(
        conversation_time=message.text,
        last_message_id=message.message_id,
        last_bot_message_id=msg.message_id,  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_message_id=msg.message_id     # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    )
    await state.set_state(UploadConversation.json_file)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ JSON —Ñ–∞–π–ª–∞
@dboperations_router.message(UploadConversation.json_file, F.document)
async def process_json_file(
    message: types.Message, 
    state: FSMContext, 
    bot: Bot,
    async_session_maker: async_sessionmaker[AsyncSession] = Depends(get_sessionmaker)
):
    if not message.document.file_name.lower().endswith('.json'):
        await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'last_bot_message_id' in data:
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=data['last_bot_message_id']
            )

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        file_name = message.document.file_name
        file_path = os.path.join(JSON_FOLDER, file_name)
        os.makedirs(JSON_FOLDER, exist_ok=True)
        
        await bot.download(
            file=message.document.file_id,
            destination=file_path
        )
        print(f"[DEBUG] –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        conversation_date = data['conversation_date']
        conversation_time = data['conversation_time']
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        async with async_session_maker() as session:
            try:
                # 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                participants_without_username = await process_json_and_insert_data(
                    file_path=file_path,
                    session=session,
                    conversation_date=conversation_date,
                    conversation_time=conversation_time
                )
                await session.commit()
                
                # 2. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(file_path, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(json_data) >= 2:
                    first_msg = json_data[0]
                    second_msg = json_data[1]
                    
                    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–ø–æ —Ç–µ–∫—Å—Ç—É –∏ —Å–ø–∏–∫–µ—Ä—É)
                    if (first_msg.get('text') == second_msg.get('text') and 
                        first_msg.get('speaker') == second_msg.get('speaker')):
                        
                        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                        json_data.pop(1)
                        
                        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
                        with open(file_path, 'w', encoding='utf-8') as f:
                            json.dump(json_data, f, ensure_ascii=False, indent=2)
                        
                        print(f"[DEBUG] –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ")
                
                # 3. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                conversation_id = await get_next_conversation_id(session) - 1
                
                await message.answer(f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                
                if participants_without_username:
                    await state.update_data(
                        conversation_id=conversation_id,
                        participants_to_update=participants_without_username
                    )
                    await ask_for_usernames(message, state, participants_without_username)
                else:
                    await state.clear()
                    
            except Exception as db_error:
                await session.rollback()
                raise db_error
                
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        print(f"[ERROR] {error_msg}")
        await message.answer(f"‚ùå {error_msg}")
    finally:
        if 'participants_to_update' not in (await state.get_data()):
            await state.clear()
            print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ")
            

async def ask_for_usernames(message: types.Message, state: FSMContext, participants: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å username"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    data = await state.get_data()
    if 'username_messages' in data:
        try:
            for msg_id in data['username_messages']:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=msg_id
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    for participant in participants:
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text=participant['name'],
                callback_data=f"set_username:{participant['id']}:{participant['name']}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(
            text="–ó–∞–≤–µ—Ä—à–∏—Ç—å (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑ username)",
            callback_data="usernames_done"
        )
    ])
    
    msg = await message.answer(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å tg_username –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:",
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
    username_messages = data.get('username_messages', [])
    username_messages.append(msg.message_id)
    await state.update_data(
        last_bot_message_id=msg.message_id,
        username_messages=username_messages
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞
@dboperations_router.callback_query(F.data.startswith("set_username:"))
async def set_username_handler(callback: types.CallbackQuery, state: FSMContext):
    _, user_id, user_name = callback.data.split(":")
    await callback.answer()
    
    await state.update_data(current_speaker={"id": int(user_id), "name": user_name})
    await state.set_state(UpdateUsernames.waiting_for_username)
    
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ tg_username –¥–ª—è {user_name}:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ username
@dboperations_router.message(UpdateUsernames.waiting_for_username)
async def process_username_input(
    message: types.Message, 
    state: FSMContext,
    async_session_maker: async_sessionmaker[AsyncSession] = Depends(get_sessionmaker)
):
    data = await state.get_data()
    speaker = data['current_speaker']
    new_username = message.text.strip()
    
    if new_username.startswith('@'):
        new_username = new_username.replace('@', '')
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π username
        existing_user = await session.execute(
            select(User).where(User.tg_username == new_username)
        )
        existing_user = existing_user.scalar_one_or_none()
        
        current_user = await session.execute(
            select(User).where(User.id == speaker['id'])
        )
        current_user = current_user.scalar_one()
        
        if existing_user:
            # –ï—Å–ª–∏ username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if existing_user.id == current_user.id:
                # –≠—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º
                current_user.tg_username = new_username
            else:
                # –ù—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ
                await session.execute(
                    update(Message)
                    .where(Message.user_id == current_user.id)
                    .values(user_id=existing_user.id)
                )
                
                convs = await session.execute(
                    select(Conversation)
                )
                convs = convs.scalars().all()
                
                for conv in convs:
                    if current_user.id in conv.participants:
                        new_participants = [
                            p for p in conv.participants if p != current_user.id
                        ]
                        if existing_user.id not in new_participants:
                            new_participants.append(existing_user.id)
                        conv.participants = new_participants
                
                await session.delete(current_user)
                
            await message.answer(f"‚úÖ Username {new_username} –æ–±–Ω–æ–≤–ª—ë–Ω")
        else:
            # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º username
            current_user.tg_username = new_username
            await message.answer(f"‚úÖ –î–ª—è {speaker['name']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username: {new_username}")
        
        await session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å username
        participants_to_update = data['participants_to_update']
        updated_participants = [
            p for p in participants_to_update 
            if p['id'] != speaker['id']
        ]
        
        if updated_participants:
            await state.update_data(participants_to_update=updated_participants)
            await ask_for_usernames(message, state, updated_participants)
        else:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if 'username_messages' in data:
                try:
                    for msg_id in data['username_messages']:
                        await message.bot.delete_message(
                            chat_id=message.chat.id,
                            message_id=msg_id
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
            await message.answer("‚úÖ –í—Å–µ usernames —É–∫–∞–∑–∞–Ω—ã!")
            await state.clear()
        
        await state.set_state(None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
@dboperations_router.callback_query(F.data == "usernames_done")
async def usernames_done_handler(
    callback: types.CallbackQuery, 
    state: FSMContext,
    bot: Bot,
    async_session_maker: async_sessionmaker[AsyncSession] = Depends(get_sessionmaker)
):
    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        try:
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        if 'username_messages' in data:
            try:
                for msg_id in data['username_messages']:
                    # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑
                    if msg_id != callback.message.message_id:
                        await bot.delete_message(
                            chat_id=callback.message.chat.id,
                            message_id=msg_id
                        )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        if 'participants_to_update' not in data or not data['participants_to_update']:
            await callback.answer("–í—Å–µ usernames —É–∫–∞–∑–∞–Ω—ã!", show_alert=True)
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω
        participants_left = [p['name'] for p in data['participants_to_update']]
        participants_left_str = ", ".join(participants_left)
        
        async with async_session_maker() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º tg_username NULL)
            for participant in data['participants_to_update']:
                user = await session.execute(
                    select(User).where(User.id == participant['id'])
                )
                user = user.scalar_one()
                user.tg_username = None  # –¢–µ–ø–µ—Ä—å —Å—Ç–æ–ª–±–µ—Ü –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç NULL
                await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        alert_message = (
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {participants_left_str} "
            f"—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è tg_username"
        )
        
        await callback.answer(alert_message, show_alert=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=alert_message
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ usernames_done: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)




async def get_next_conversation_id(session: AsyncSession) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–π –±–µ—Å–µ–¥—ã"""
    result = await session.execute(select(func.max(Conversation.id)))
    max_id = result.scalar() or 0  # –ï—Å–ª–∏ –Ω–µ—Ç –±–µ—Å–µ–¥, –Ω–∞—á–Ω–µ–º —Å 1
    return max_id + 1




# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_json_and_insert_data
async def process_json_and_insert_data(
    file_path: str,
    session: AsyncSession,
    conversation_date: str,
    conversation_time: str
) -> list:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î. 
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ username (—Å–ª–æ–≤–∞—Ä–∏ —Å id –∏ name)."""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID –±–µ—Å–µ–¥—ã
    conversation_id = await get_next_conversation_id(session)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–∫—Ç—ã
    from datetime import datetime
    conv_date = datetime.strptime(conversation_date, "%Y-%m-%d").date()
    conv_time = datetime.strptime(conversation_time, "%H:%M").time()
    
    # –°–æ–∑–¥–∞—ë–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants_ids = set()
    participants_without_username = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ –∏–∑ JSON
    speakers = {item['speaker'] for item in data if 'speaker' in item}
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID
    for speaker in speakers:
        user = await session.execute(
            select(User).where(User.name == speaker)
        )
        user = user.scalar_one_or_none()
        
        if not user:
            user = User(
                name=speaker,
                tg_username=f"unknown_{speaker}"
            )
            session.add(user)
            await session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        
        participants_ids.add(user.id)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π username (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å unknown_), –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if user.tg_username.startswith("unknown_"):
            participants_without_username.append({
                'id': user.id,
                'name': user.name
            })
    
    # –°–æ–∑–¥–∞–µ–º –±–µ—Å–µ–¥—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π, –≤—Ä–µ–º–µ–Ω–µ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    conversation = Conversation(
        id=conversation_id,
        date_created=conv_date,
        time_created=conv_time,
        participants=list(participants_ids)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫
    )
    session.add(conversation)
    
    if not data:
        return participants_without_username
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    first_item = data[0]
    previous_speaker = first_item.get('speaker')
    combined_texts = [first_item.get('text')] if previous_speaker else []

    for item in data[1:]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        speaker = item.get('speaker')
        text = item.get('text')
        start = item.get('start')
        
        if not all([speaker, text, start]):
            continue
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
        start_seconds = int(start)
        total_seconds = conv_time.hour * 3600 + conv_time.minute * 60 + int(start_seconds/1000)
        hours = total_seconds // 3600 % 24
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
        message_time = time(hour=hours, minute=minutes, second=seconds)
        
        if speaker == previous_speaker:
            combined_texts.append(text)
            continue
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if combined_texts and previous_speaker:
            await process_speaker_messages(
                session=session,
                speaker=previous_speaker,
                texts=combined_texts,
                conversation_id=conversation_id,
                current_date=conv_date,
                message_time=message_time
            )
            
        combined_texts = [text]
        previous_speaker = speaker

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
    if combined_texts and previous_speaker:
        await process_speaker_messages(
            session=session,
            speaker=previous_speaker,
            texts=combined_texts,
            conversation_id=conversation_id,
            current_date=conv_date,
            message_time=message_time  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        )
    
    return participants_without_username


async def process_speaker_messages(
    session: AsyncSession,
    speaker: str,
    texts: list[str],
    conversation_id: int,
    current_date: date,
    message_time: time
):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ø–∏–∫–µ—Ä–∞"""
    user = await session.execute(
        select(User).where(User.name == speaker)
    )
    user = user.scalar_one_or_none()
    
    if not user:
        user = User(
            name=speaker,
            tg_username=f"unknown_{speaker}"
        )
        session.add(user)
        await session.flush()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã
    raw_text = '/'.join(texts)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    processed_text = await process_single_message(raw_text)
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
    embedding = await embedding_single_message(processed_text)
    
    message = Message(
        user_id=user.id,
        conversation_id=conversation_id,
        text=raw_text,
        date=current_date,
        time=message_time,
        processed_text=processed_text,
        embeddings=embedding  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
    )
    session.add(message)
    
async def get_message_contexts(
    message_tuples: list[tuple[str, str, float]], 
    session: AsyncSession
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π.
    
    Args:
        message_tuples: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞)
        session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    result = []
    
    for text, processed_text, similarity in message_tuples:
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
        message_query = select(Message).where(
            and_(
                Message.text == text,
                Message.processed_text == processed_text
            )
        )
        message = (await session.execute(message_query)).scalar_one_or_none()
        
        if not message:
            continue
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–µ–¥–µ
        conv_query = select(Conversation).where(Conversation.id == message.conversation_id)
        conversation = (await session.execute(conv_query)).scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        user_query = select(User).where(User.id == message.user_id)
        user = (await session.execute(user_query)).scalar_one()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±–µ—Å–µ–¥—ã
        conv_date_time = (
            f"{conversation.date_created.strftime('%Y-%m-%d')} "
            f"{conversation.time_created.strftime('%H:%M:%S')}"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        messages_query = (
            select(Message)
            .where(Message.conversation_id == message.conversation_id)
            .order_by(Message.date.asc(), Message.time.asc())
        )
        all_messages = (await session.execute(messages_query)).scalars().all()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            current_idx = [m.id for m in all_messages].index(message.id)
        except ValueError:
            continue
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
        output_messages = []
        
        # 2 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
        prev_messages = all_messages[max(0, current_idx-2):current_idx]
        for msg in prev_messages:
            user_query = select(User).where(User.id == msg.user_id)
            msg_user = (await session.execute(user_query)).scalar_one()
            output_messages.append(f"{msg_user.name}: {msg.text}")
            
        # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        output_messages.append(f"{user.name}: {message.text} [similarity: {similarity:.2f}]")
        
        # 5 –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        next_messages = all_messages[current_idx+1:current_idx+6]
        for msg in next_messages:
            user_query = select(User).where(User.id == msg.user_id)
            msg_user = (await session.execute(user_query)).scalar_one()
            output_messages.append(f"{msg_user.name}: {msg.text}")
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        block = [
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {conv_date_time}",
            *output_messages,
            ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
        ]
        
        result.append("\n".join(block))
    
    return "\n".join(result)